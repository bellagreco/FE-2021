{"version":3,"sources":["desktop.png","mobile.png","components/Button/index.js","components/Stage/index.js","components/Cards/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","_ref","data","show","showCards","console","log","react_default","a","createElement","Fragment","className","onClick","buttonLabelHide","buttonLabelShow","Stage","style","backgroundImage","concat","image","siteTitle","siteSubTitle","Cards","componentTitle","slidedown","cards","map","card","title","anchorUrl","anchorText","description","alt","src","href","App","state","_this","setState","this","components_Stage","page","components","components_Cards","components_Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b33d65ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/desktop.abc7cfd2.png\";","module.exports = __webpack_public_path__ + \"static/media/mobile.aed485eb.png\";","import React, {setState} from 'react';\nimport './style.css';\n\n\n\nconst Button = ({data, show, showCards}) => {\n\n\n  console.log(show)\n  return <>\n  <div className='btn-container'>\n  <a className='btn' onClick={showCards}>{show === true ? data.buttonLabelHide : data.buttonLabelShow}</a>\n  </div>\n  </>\n}\n\nexport default Button;\n","import React from 'react';\nimport './style.css';\n\nconst Stage = ({ data }) => {\n  console.log(data, 'stage')\n  return <>\n    <div className='overlay' />\n    <div className='stage' style={{ backgroundImage: `url(${data.image})` }} />\n    <div className='stage-header'>\n      <h1>{data.siteTitle}</h1>\n      <h3>{data.siteSubTitle}</h3>\n    </div>\n  </>\n}\n\nexport default Stage;\n","import React from 'react';\nimport './style.css';\nimport {SlideDown} from 'react-slidedown'\nimport 'react-slidedown/lib/slidedown.css'\n\nconst Cards = ({ data, show }) => {\n  console.log(data)\n  return <>\n  <h1 className=\"page-title\">{data.componentTitle}</h1>\n  <SlideDown className={'my-dropdown-slidedown'}>\n  {show === true && \n    <div className='cards'>\n\n      {data.cards.map(card => {\n        const { title, anchorUrl, anchorText, image, description } = card\n        return <div className='card'>\n\n          <img alt='image' src={image} />\n          <div className='card-text'>\n            <h2>{title}</h2>\n            <p>{description}</p>\n          </div>\n          <div className='link'> \n          <a href={anchorUrl}>{anchorText}</a>\n</div>\n        </div>\n      })}\n    </div>\n}</SlideDown>\n  </>\n}\n\nexport default Cards;\n","import React from 'react';\nimport Button from '../Button';\nimport Stage from '../Stage';\nimport Cards from '../Cards';\nimport data from '../../data.json';\nimport './style.css';\nimport Design from '../../../src/desktop.png'\nimport DesignM from '../../../src/mobile.png'\n\n\nclass App extends React.Component{ \n  state = {\n    show: true\n  }\n\n   showCards = () => { \n     const show = this.state.show\n     if (show === true) {\n    this.setState({show : false})\n     } else {\n      this.setState({show : true})\n     }\n  }\n  \n  render() {\n    console.log(this.state.show)\n    return (\n      // I created this extra div here to add the design images outside the cointainer so I could use them as reference\n      <div>\n      <div className=\"container\">\n      <Stage data={data.page.components[0]} />\n        <Cards data={data.page.components[1]} show={this.state.show}/>\n        <Button data={data.page.components[2]} show={this.state.show} showCards={this.showCards} />\n     \n      </div>\n      {/* <img src={Design} style={{maxWidth:'100%'}}/> */}\n      {/* <img src={DesignM} style={{maxWidth:'100%'}}/> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}